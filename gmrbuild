#!/bin/bash
# ===================================================================
# Script to rebuild the GMR
# Runs under mnauto
# Runs continually, invoking both immediate steps and batch steps
# To restart, invoke as "gmrbuild yyyy.mm.dd" 
# using the yyyy.mm.dd value that was created during the initial run. 
# All successful steps will be skipped on the restart.  
# To force later steps to be re-executed, delete their "SUCCESS" records from $LOGFILE.  
# Note:  kill any running gmrbuild and waitforsuccess tasks and check for and deal with sub-processes started by the current step.
#   Otherwise, steps that are in progress will be started again.  
# Note:  check the scripts to be restarted for their side effects. 
# Note:  Successful restart of step 8 is dependent on the $NOWFILE date string;
#  will need to be hard-coded if the date has changed since step 7 started
# To add new addresses to the list of folks who are notified:
#  NOTIFYEMAIL="stevedoubleday@gmail.com,jhong@icsi.berkeley.edu,newaddress@somewhere.com"
# Step 4 is the extraction step.  Normally it runs on mirto1/2:
#runstep 4 1 ~/bin directoryBuildAndCheck "$NOW $LOGDETAILFILE gmryyyy.mm.dd"
# To have it also use the rest of the gen pool (slivo's & mussel's)+ambrosia:
#runstep 4 1 ~/bin directoryBuildAndCheck "$NOW $LOGDETAILFILE gmrgenyyyy.mm.dd"
#
# To run as a regression test:  "gmrbuild test" (case sensitive)
# The regression test will add a "Tn" suffix to the $NOW value, e.g., yyyy.mm.ddT1
# See setNow() function below for details 
# To restart a regression test:  "gmrbuild test yyyy.mm.ddT1"
# -Steve Doubleday 
# ===================================================================
umask 0002
export JSON_DIR="/n/picnic/xw/metanet/corpora/json"
export DBSERVER_DIR="/xa/metanet"
export RDF_DIR="/u/metanet/repository/rdf"
export CXNS_DIR="/u/metanet/extraction/cxns"
export SEEDS_DIR="/u/metanet/extraction/seeds"
export GMR_DIR="/u/metanet/repository/gmrdumps"
export REPORT_DIR="$HOME/reports"
NOW=$(date +"%Y.%m.%d")
# setNow is used during regression testing to allow multiple regression
# tests to run during the same day, without conflicts with each other or with 
# a normal production GMR run.  
# looks for the presence of a log file; 
# adds a suffix "Tn" where n=1, 2, etc.  until an unused filename is found. 
# NOW format:  yyyy.mm.ddTx
function setNow() {
  LOGS="$HOME/logs"
  SUFFIX=1
  TEMPNOW="${NOW}T${SUFFIX}"
  CHECK="gmr$TEMPNOW.txt"
  while [[ -f "$LOGS/$CHECK" ]]
  do
    echo "checking for $CHECK"
    (( SUFFIX += 1))
    TEMPNOW="${NOW}T${SUFFIX}"
    CHECK="gmr$TEMPNOW.txt"
  done
  NOW=$TEMPNOW
  export NOW
  echo "NOW value for this GMR test run: $NOW"
}
usage() {
 echo "-c : casestudy only. -t also forced, to enable multiple runs yyyy.mm.dd[Tx]"
 echo "-r yyyy.mm.dd[Tx] : to rerun"
 echo "-t : test run" 
 echo "-s nn : run step nn only"
 echo "-h : this help"
}
echo "$0 starting, using $PYTHONPATH" 
while getopts "hictr:s:" opt; 
do
  case $opt in
    c) export CASE="Y"; export TEST="Y";  echo "run casestudy only; forces -t as well" ;;
    r) export OVERRIDE="$OPTARG"; RERUN="Y";  echo "rerun for $OVERRIDE" ;;
    s) export STEPONLY="$OPTARG"; echo "only step $STEPONLY will be run"  ;;
    t) echo "this is a test run"; setNow "$NOW"; export TEST="Y"  ;;
    h) usage ; exit 0;;
    \?)
      echo "Invalid option: -$OPTARG" >&2 ; exit 1 ;;
    :) echo "Option -$OPTARG requires argument" ; usage;  exit 1;;
  esac
done
shift $(($OPTIND - 1))
if [[ "$RERUN" == "Y" ]]; then
  echo "overriding $NOW with $OVERRIDE"
  NOW=$OVERRIDE
fi
NOWDB=`echo "$NOW" | sed 's/\.//g'`
echo "NOWDB = $NOWDB"
LOGFILE=$HOME/logs/gmr$NOW.txt
export LOGFILE
LOGDETAILFILE=$HOME/logs/gmrdetail$NOW.txt
export LOGDETAILFILE
NOTIFYEMAIL="stevedoubleday@gmail.com"
#list of addresses getting the summary report
REPORTEMAIL="stevedoubleday@gmail.com,jhong@icsi.berkeley.edu,collinb@icsi.berkeley.edu,lucag@icsi.berkeley.edu,hieronym@icsi.berkeley.edu,moorman@icsi.berkeley.edu,mrjasonbolton@gmail.com"
#NOTIFYEMAIL="stevedoubleday@gmail.com,jhong@icsi.berkeley.edu"
#NOTIFYEMAIL="stevedoubleday@gmail.com,jhong@icsi.berkeley.edu,collinb@icsi.berkeley.edu"
export NOTIFYEMAIL
export REPORTEMAIL
TEMPMSG="tempmsg.txt"
export TEMPMSG
NOWTIME=$(date +"%Y.%m.%d--%H-%M")
echo "$NOWTIME gmrbuild:  starting for $NOW, with NOWDB=$NOWDB, using $PYTHONPATH" | tee -a $LOGFILE 
cd $HOME/bin
echo "gmrbuild: $HOME/bin git commit:" | tee -a $LOGFILE 
git log | head >> $LOGFILE
cd $HOME/mdev
echo "gmrbuild: $HOME/mdev git commit:" | tee -a $LOGFILE 
git log | head >> $LOGFILE
cd $HOME/logs
# runstep executes a step and will wait indefinitely for success
runstep 1 1 ~/bin updateOwlAndCheck
runstep 2 1 ~/bin triplestoreReloadAndCheck $LOGDETAILFILE
#runstep 2 1 ~/bin triplestoreReloadAllAndCheck $LOGDETAILFILE
runstep 3 1 ~/bin versionConstructionsAndSeeds $NOW 
runstep 4 1 ~/bin directoryBuildAndCheck "$NOW $LOGDETAILFILE gmryyyy.mm.dd"
#runstep 4 1 ~/bin directoryBuildAndCheck "$NOW $LOGDETAILFILE gmrgenspeechyyyy.mm.dd"
runstep 5 1 ~/bin loadTargetWordCaches $NOW $LOGDETAILFILE
runstep 6 6 ~/bin submitExtracts $NOW $LOGDETAILFILE
runstep 7 1 ~/bin submitCaseStudy $NOW $LOGDETAILFILE
runstep 8 1 ~/bin shutdownTripleStore $LOGDETAILFILE
#runstep 8 1 ~/bin shutdownTripleStoreAll $LOGDETAILFILE
#runstep 9 1 ~/bin submitCouchdbImports "gmr$NOW $LOGDETAILFILE"
runstep 10 1 ~/bin copyResultsAndCheck "gmr$NOW" 
runstep 11 4 ~/bin submitImportFileCreation "gmr$NOW $NOWDB" 
runstep 12 1 ~/bin submitImportCasestudyFileCreation "gmr$NOW $NOWDB" 
runstep 13 1 ~/bin importFilesToDatabaseAndCheck "gmr$NOW $NOWDB" 
runstep 14 1 ~/bin importCaseStudyToDatabase "gmr$NOW $NOWDB" 
runstep 15 1 ~/bin updateCoreTables "gmr$NOW $NOWDB $LOGDETAILFILE" 
runstep 16 1 ~/bin createGmrDumpAndCheck  $NOWDB  
runstep 17 1 ~/bin createXcaReportsAndCheck  "gmr$NOW $NOWDB $LOGDETAILFILE"  
runstep 18 1 ~/bin createGenLmReportsAndCheck "gmr$NOW $NOWDB $LOGDETAILFILE"  
runstep 19 1 ~/bin createGmrSummary  "$NOW $NOWDB $REPORT_DIR $LOGDETAILFILE"  
runstep 20 1 ~/bin cleanup "$NOW $LOGDETAILFILE"
#NOWTIME=$(date +"%Y.%m.%d--%H-%M")
#echo "$NOWTIME gmrbuild:  completed $NOW." | tee  $TEMPMSG
#cat $TEMPMSG >> $LOGFILE
#notify $NOTIFYEMAIL $TEMPMSG
#rm -f $TEMPMSG
#SUMMARY=$REPORT_DIR/statistics.txt
#cat $SUMMARY >> $LOGFILE
#notify $REPORTEMAIL $SUMMARY
#rm -f $SUMMARY
exit 0
